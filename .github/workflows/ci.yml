name: Node.js CI

# 구독할 이벤트
on:
  push:
    branches: [main] 

# jobs 단위로 개별 서버(정확히는 Docker 컨테이너 단위라고 한다.)에서 작업이 수행된다.
# 각 작업은 병렬로 실행 된다고 하는데, needs: build와 같이 표시해서 기다릴 수도 있다.
jobs:
  build-and-deploy:
    # Ubuntu, Windows, MacOS를 지원한다.
    runs-on: ubuntu-latest

    # node-version 과 같이 배열로 돼있으면, 해당 원소를 순회하면서 작업이 반복해서 실행된다.
    # 응용해서 runs-on에 여러 OS에서 돌릴 수도 있다.
    strategy:
      matrix:
        node-version: [18.x] # 템플릿 기본값: [10.x, 12.x, 14.x]

    # uses 개념은 다른 사람이 작성한 내용을 실행하는 개념이다.
    # actions/checkout: GitHub의 마지막 커밋으로 Checkout 한다.
    # actions/setup-node: Node.js를 설치한다.
    # run 개념은 명령어를 실행한다. 셸 스크립트와 동일하다.
    steps:
      - name : 체크아웃
        uses: actions/checkout@v3
        
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}  

      - name: 패키지 설치
        working-directory: ./
        run: npm install
        
      - name: 빌드 과정을 시작
        working-directory: ./
        run: npm run build --if-present
         #- run: npm test
        
      - name: 빌드한 코드를 압축
        #run: zip -r jjm.zip ./dist ./scripts ./appspec.yml ./.env ./package.json
        run: zip -r jjm.zip ./ -x "*.zip"

      - name: AWS에 접속
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_CD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_CD_ACCESS_KEY_PW }}
          aws-region: ap-northeast-2

      - name: S3에 압축된 서버 코드를 업로드
        run: aws s3 cp --region ap-northeast-2 ./jjm.zip s3://jjm-cd-bucket/deploy/

      - name: AWS codeDeploy로 배포를 시작
        run: aws deploy create-deployment
          --application-name jjm-cd
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name jjmdev
          --s3-location bucket=jjm-cd-bucket,bundleType=zip,key=deploy/jjm.zip
          
          
   
